from twisted.internet.defer import Deferred
from twisted.python.failure import Failure
from typing import (
	Any,
)

def main() -> Deferred: ...

class Channel:
	def __init__(self, key: str, server_state: ServerState | None = ...) -> None: ...
	def add_client(self, client: User) -> None: ...
	def ping_clients(self) -> None: ...
	def remove_connection(self, con: User) -> None: ...
	def send_to_clients(
		self, obj: dict[str, Any], exclude: User | None = ..., origin: int | None = ...
	) -> None: ...

class Handler:
	def __init__(self) -> None: ...
	def connectionLost(self, reason: Failure) -> None: ...
	def connectionMade(self) -> None: ...
	def do_generate_key(self, obj: dict[str, str]) -> None: ...
	def do_join(self, obj: dict[str, str]) -> None: ...
	def do_protocol_version(self, obj: dict[str, int | str]) -> None: ...
	def lineReceived(self, line: bytes) -> None: ...
	def send(self, origin: int | None = ..., **msg: dict[str, Any]) -> None: ...

class RemoteServerFactory:
	def __init__(self, server_state: ServerState) -> None: ...
	def ping_connected_clients(self) -> None: ...

class ServerState:
	def __init__(self) -> None: ...
	def find_or_create_channel(self, name: str) -> Channel: ...
	def remove_channel(self, channel: str) -> None: ...

class User:
	def __init__(self, protocol: Handler) -> None: ...
	def as_dict(self) -> dict[str, int | str]: ...
	def connection_lost(self) -> None: ...
	def generate_key(self) -> str: ...
	def join(self, channel: str, connection_type: str) -> None: ...
	def send(self, **obj: dict[str, Any]) -> None: ...
	def send_motd(self) -> None: ...
