from twisted.internet.defer import Deferred
from twisted.python.failure import Failure
from typing import (
    Any,
    Dict,
    Optional,
    Union,
)


def main() -> Deferred: ...


class Channel:
    def __init__(self, key: str, server_state: Optional[ServerState] = ...) -> None: ...
    def add_client(self, client: User) -> None: ...
    def ping_clients(self) -> None: ...
    def remove_connection(self, con: User) -> None: ...
    def send_to_clients(
        self,
        obj: Dict[str, Any],
        exclude: Optional[User] = ...,
        origin: Optional[int] = ...
    ) -> None: ...


class Handler:
    def __init__(self) -> None: ...
    def connectionLost(self, reason: Failure) -> None: ...
    def connectionMade(self) -> None: ...
    def do_generate_key(self, obj: Dict[str, str]) -> None: ...
    def do_join(self, obj: Dict[str, str]) -> None: ...
    def do_protocol_version(self, obj: Dict[str, Union[int, str]]) -> None: ...
    def lineReceived(self, line: bytes) -> None: ...
    def send(self, origin: Optional[int] = ..., **msg: dict[str, Any]) -> None: ...


class RemoteServerFactory:
    def __init__(self, server_state: ServerState) -> None: ...
    def ping_connected_clients(self) -> None: ...


class ServerState:
    def __init__(self) -> None: ...
    def find_or_create_channel(self, name: str) -> Channel: ...
    def remove_channel(self, channel: str) -> None: ...


class User:
    def __init__(self, protocol: Handler) -> None: ...
    def as_dict(self) -> Dict[str, Union[int, str]]: ...
    def connection_lost(self) -> None: ...
    def generate_key(self) -> str: ...
    def join(self, channel: str, connection_type: str) -> None: ...
    def send(self, **obj: dict[str, Any]) -> None: ...
    def send_motd(self) -> None: ...
